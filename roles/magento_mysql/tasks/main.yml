---
  # tasks file for magento_mysql
  # Tâches pour installer et configurer MySQL

  # Mise à jour complète du système
  - name: Update apt cache
    ansible.builtin.apt:
      update_cache: yes
    become: yes
    tags: system

  - name: Perform a full system upgrade
    ansible.builtin.apt:
      upgrade: dist
    become: yes
    tags: system

  # 0. Installation de Python, pip et des dépendances MySQL
  - name: Ensure Python and necessary packages are installed
    ansible.builtin.apt:
      name:
        - python3-pip
        - python3-dev
        - default-libmysqlclient-dev
        - build-essential
        - pkg-config
      state: present
    become: yes
    tags: mysql

  # Installer MySQL
  - name: Install MySQL server
    ansible.builtin.apt:
      name: mysql-server
      state: present
    become: yes
    tags: mysql

  - name: Install MySQL client
    ansible.builtin.apt:
      name: mysql-client
      state: present
    become: yes
    tags: mysql

  # Installer mysqlclient via pip
  - name: Install mysqlclient via pip
    ansible.builtin.pip:
      name: mysqlclient
    become: yes
    tags: mysql

  # 3. Démarrage du service MySQL
  - name: Ensure MySQL is running
    ansible.builtin.service:
      name: mysql
      state: started
      enabled: yes
    become: yes
    tags: mysql

  # 4. Vérification du plugin d'authentification root
  - name: Check root auth method
    ansible.builtin.command:
      cmd: "mysql -u root -e 'SELECT User, Host, plugin FROM mysql.user WHERE User=\"root\";'"
    register: root_auth_method
    ignore_errors: yes
    become: yes
    tags: mysql

  # 5. Configurer l'authentification root uniquement si nécessaire
  - name: Set root password and change auth method to mysql_native_password
    community.mysql.mysql_user:
      name: root
      password: "{{ mysql_admin_pass }}"
      host: localhost
      priv: "*.*:ALL,GRANT"
      plugin: mysql_native_password  # Ajout de cette ligne pour forcer mysql_native_password
      state: present
      login_unix_socket: /var/run/mysqld/mysqld.sock
    when: "'auth_socket' in root_auth_method.stdout"
    become: yes
    tags: mysql

  # 6. Création de la base de données
  - name: Create database
    community.mysql.mysql_db:
      name: "{{ db_name }}"
      state: present
      login_user: root
      login_password: "{{ mysql_admin_pass }}"
    become: yes
    tags: mysql

  # 7. Création de l'utilisateur de la base de données
  - name: Create MySQL user
    community.mysql.mysql_user:
      name: "{{ db_user }}"
      password: "{{ db_pass }}"
      priv: "{{ db_name }}.*:ALL"  # Accorde tous les privilèges sur la base de données
      state: present
      login_user: root
      login_password: "{{ mysql_admin_pass }}"
    become: yes
    tags: mysql
